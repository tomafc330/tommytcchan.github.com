<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-01-06T17:05:55-08:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Capistrano 3 and rbenv sshkit upgrade to 1.3]]></title>
    <link href="http://tommytcchan.github.com/blog/2014/01/06/capistrano-3-and-rbenv-sshkit-upgrade-to-1-dot-3/"/>
    <updated>2014-01-06T17:02:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2014/01/06/capistrano-3-and-rbenv-sshkit-upgrade-to-1-dot-3</id>
    <content type="html"><![CDATA[<p>I spend a bit of time today figuring out why the capistrano rbenv gem doesn&#8217;t work. First it was complaining that I had an older version of the sshkit library (it was being used by an older version of the fog library). Upgraded the fob library, but it was complaining of this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cap aborted!
</span><span class='line'>Unable to activate capistrano-rbenv-2.0.0, because sshkit-1.3.0 conflicts with sshkit (~&gt; 1.
</span><span class='line'>2.0)
</span><span class='line'>/home/tchan/repo/venuespot/Capfile:19:in `&lt;top (required)&gt;'
</span><span class='line'>/home/tchan/.rvm/gems/ruby-2.0.0-p247@venuespot/gems/capistrano-3.0.1/lib/capistrano/applica
</span><span class='line'>tion.rb:22:in `load_rakefile'
</span><span class='line'>/home/tchan/.rvm/gems/ruby-2.0.0-p247@venuespot/gems/capistrano-3.0.1/lib/capistrano/applica
</span><span class='line'>tion.rb:12:in `run'</span></code></pre></td></tr></table></div></figure>


<p>After digging through the commit history of the <a href="gem">https://github.com/capistrano/rbenv/pull/21/files</a> I realized it&#8217;s a library version issue.</p>

<p>Uninstall the capistrano gem, then add this in your Gemfile (until the author bumps the version):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'capistrano-rbenv', :git =&gt; 'git@github.com:capistrano/rbenv.git', :ref =&gt; '67222bbce120323e422b051dcd167d8e2d3adbf0'</span></code></pre></td></tr></table></div></figure>


<p>Hope that helps someone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Rails with Mixpanel on both the front end and back end]]></title>
    <link href="http://tommytcchan.github.com/blog/2014/01/05/setting-up-rails-with-mixpanel-on-both-the-front-end-and-back-end/"/>
    <updated>2014-01-05T17:12:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2014/01/05/setting-up-rails-with-mixpanel-on-both-the-front-end-and-back-end</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.venuespot.co">venuespot</a>, we use Mixpanel. We&#8217;ve had an account for awhile actually, but didn&#8217;t really do anything with it. I upgraded our GA to use the new GA script, and needless to say the events management isn&#8217;t that great. That prompted me to look at Mixpanel again. In this article I will explain how one is able to set up events to track individual users going through the system without too much intrusive work.</p>

<h1>The Requirements</h1>

<p>We need a few things we wanted to use with our app:
1.  We want to track the different events that a user takes throughout our site, whether they are logged in or not.
2.  We wanted to blanket track <strong>all</strong> events, such as going to a controller#action.
3.  We don&#8217;t want it to affect the performance of our system too much, which meant hooking into Sidekiq for asynchronous processing.</p>

<h1>The approach</h1>

<p>If you followed the Mixpanel recommendations, they advise you to use the JavaScript library. This was a little limiting for us as we want to track when we send out emails and notifications to the users. So we took a 2 pronged approach:
1.  If the user isn&#8217;t signed in and is just browsing our site, we track those events with the JS client library.
2.  Once they have signed up/in though, we will use server side calls to track the events in an async manner.</p>

<h1>The Setup</h1>

<p>You will need a few things:
1.  Sign up with Mixpanel, and install the javascript.
2.  Place the javascript in your asset pipeline folder and reference it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># application.js
</span><span class='line'>//= require mixpanel/mixpanel</span></code></pre></td></tr></table></div></figure>


<h1>The implementation</h1>

<p>So let&#8217;s start with the part where the user is not logged in but we want to track their actions. We need to tell mixpanel that a new user on our site. Now we will be using <code>localStorage</code> to store our anonymous user.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># venuespot_tracker.js
</span><span class='line'>function VenueSpot() {
</span><span class='line'>
</span><span class='line'>    this.createOrGetUser = function () {
</span><span class='line'>        //check to see if localStorage is defined, omitted for brevity's sake
</span><span class='line'>        ...
</span><span class='line'>
</span><span class='line'>        if (!localStorage.vs_user) {
</span><span class='line'>            localStorage.vs_user = rand(12);
</span><span class='line'>            mixpanel.identify(localStorage.vs_user);
</span><span class='line'>            mixpanel.people.set({
</span><span class='line'>                "$created": new Date(),
</span><span class='line'>                "$last_login": new Date()
</span><span class='line'>            });
</span><span class='line'>        }
</span><span class='line'>        return localStorage.vs_user;
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    this.homePageViewed = function() {
</span><span class='line'>        this.createOrGetUser();
</span><span class='line'>        this.track(document.location.pathname + ' page viewed'); //method omitted for brevity
</span><span class='line'>
</span><span class='line'>        mixpanel.track_links("a", "Clicked Link", {
</span><span class='line'>            referrer: document.referrer
</span><span class='line'>        });
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var vsTracker = new VenueSpotTracker();
</span><span class='line'>...
</span><span class='line'>vsTracker.homePageViewed();</span></code></pre></td></tr></table></div></figure>


<p>A couple of interesting things&#8230;I omitted some of the code, I&#8217;m sure you can fill in the missing pieces.</p>

<p>Another interesting thing: if there is no user defined, we have to call <code>identify</code> and then set some attributes to let Mixpanel we want to track this anonymous user.</p>

<p>We also want to track all of the links the user clicks, so we use provided <code>track_links</code> method.</p>

<p>Once that&#8217;s done, we just sit back and see the results: http://screencloud.net/v/jLLi</p>

<h3>Sending the info to the backend</h3>

<p>Okay, so far we&#8217;ve got stats on users who have not signed up. What happens when they sign up? We don&#8217;t want to lose the previous history that they had, so we have to call the <code>alias</code> api method after they&#8217;ve logged in so that we can register them. For this we use the <code>mixpanel-ruby</code> gem.</p>

<p>Now you might be asking, why don&#8217;t we just continue to use the JS library? Well I thought about this for a few minutes. If you did that, you would have to make sure that we send over the email down to the client. Also, any time you want to do any tracking you would have to do the same. Finally we also wanted to track the history when we send out emails. That&#8217;s a backend job so that makes it really difficult.</p>

<p>Hopefully I&#8217;ve convinced you of why we want to use the backend library.</p>

<ol>
<li>First thing is to include the gem in your gemfile.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'mixpanel-ruby'</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Now on the sign up flow, you have to add in a hidden field to the back end registration:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$(document).ready(function() {
</span><span class='line'>    $('&lt;input&gt;').attr({
</span><span class='line'>        type: 'hidden',
</span><span class='line'>        id: 'mix_panel_temp_id',
</span><span class='line'>        name: 'mix_panel_temp_id',
</span><span class='line'>        value: venuespotTracker.createOrGetUser()
</span><span class='line'>    }).appendTo('form');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>We need this because we want to do the alias in the controller:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># create
</span><span class='line'>def create
</span><span class='line'>...
</span><span class='line'>        MixpanelAliasWorker.perform_async(@user.email, params[:mix_panel_temp_id], @user.first_name, @user.last_name, @user.phone, @user.type)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Notice here we are using Sidekiq to perform our linking in an async manner. The Mixpanel api has a few methods to do with async, but I feel that this is an easier approach.
</span><span class='line'>
</span><span class='line'>In MixpanelAliasWorker, this is what happens:</span></code></pre></td></tr></table></div></figure>


<p>require &#8216;mixpanel-ruby&#8217;</p>

<h1>Does alias and link up the email address</h1>

<p>class MixpanelAliasWorker</p>

<pre><code>include Sidekiq::Worker

def mixpanel()
    Mixpanel::Tracker.new(ENV['mix_panel'])
end

def perform(email, old_id, first_name, last_name, phone, user_type)
    tracker = mixpanel()
    tracker.alias email, old_id #synchrious call
    tracker.people.set(email, {
        '$first_name' =&gt; first_name,
        '$last_name' =&gt; last_name,
        '$email' =&gt; email,
        '$phone' =&gt; phone,
        'User Type' =&gt; user_type
    });
end
</code></pre>

<p>end</p>

<p>What happens here is that when a user is registered, we alias the old temp id we created in the front end with the actual email.</p>

<p>Once we do that then Mixpanel will now associate all new events with that email with the previous &#8216;anonymous&#8217; user.</p>

<ol>
<li>Now that we have the user correctly linked, the next step is to track all of the events. For that we will go into the <code>ApplicationController</code> and add this method:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def track_with_mixpanel
</span><span class='line'>    if (current_user)
</span><span class='line'>
</span><span class='line'>        if params[:id]
</span><span class='line'>            instance = controller_name.classify.constantize.find(params[:id])
</span><span class='line'>            id = instance.respond_to?(:name) ? instance.name : params[:id]
</span><span class='line'>        end
</span><span class='line'>
</span><span class='line'>        MixpanelTrackWorker.perform_async(current_user.email, "Page View - #{self.class.to_s}##{self.instance_variable_get('@_action_name')} #{id}", { :controller =&gt; 'test', :action =&gt; 'test'})
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Let me explain what this does. We check that the current user exists, and also check if there is a params[:id]. If there is, we want to know which model that belongs to.</p>

<p>Rails is pretty awesome because you can actually find that out by using <code>controller_name.classify</code>, and then make that into a constant, and finally invoke it to find the model.</p>

<p>I know this isn&#8217;t scalable if we have tens of thousands of users, but our stage we value metrics so in the future this will have to be modified, but it gives us a good tracking for a user and all the actions they do once they are signed in.</p>

<p>Here&#8217;s an example: http://screencloud.net/v/kLnw</p>

<p>So there you have it folks. Ping me if you have any issues with setting this up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best practices with nginx and rails]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/12/28/best-practices-with-nginx-and-rails/"/>
    <updated>2013-12-28T09:08:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/12/28/best-practices-with-nginx-and-rails</id>
    <content type="html"><![CDATA[<p>While searching on the internet for a related question, I came across a <a href="https://gist.github.com/mikhailov/3052776">gist</a> that had the best practices for deploying a rails app with unicorn. Please refer to it but I thought I would comment on a few of the best practices that I observed.</p>

<ol>
<li><p>Using the <code>include</code> directive.
This proved to be a great solution for when you want some of your configs checked into source control. You can control the settings without having to muck around in <code>/opt/nginx/conf</code> so you know what you are deploying when you restart nginx.</p></li>
<li><p>Adding the gzip headers to the static resources
The author compiled nginx with <code>--with-http_gzip_static_module</code> which he used later:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  location ~ ^/(assets|images|javascripts|stylesheets|swfs|system)/ {
</span><span class='line'>    gzip_static       on;
</span><span class='line'>    expires           max;
</span><span class='line'>    add_header        Cache-Control public;
</span><span class='line'>    add_header        Last-Modified "";
</span><span class='line'>    add_header        ETag "";
</span><span class='line'> 
</span><span class='line'>    open_file_cache          max=1000 inactive=500s;
</span><span class='line'>    open_file_cache_valid    600s;
</span><span class='line'>    open_file_cache_errors   on;
</span><span class='line'>    break;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>For myself I didn&#8217;t want to add those headers to the <code>assets</code> folder, but for everything it was really sensible to do so.</p>

<ol>
<li>Adding a <code>open_file_cache</code> for static assets. From the above, we can see that there is the <code>open_file_cache</code> decl. This directive sets the cache activity on. This is good when you have a busy server and so you don&#8217;t have to open the file descriptor every time.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Foundation 5 and Reveal plugin not working issues]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/12/22/foundation-5-and-reveal-plugin-not-working-issues/"/>
    <updated>2013-12-22T19:46:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/12/22/foundation-5-and-reveal-plugin-not-working-issues</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a client project today using the new Foundation 5 version and I had a hard time with trying to get reveal to work.</p>

<p>I followed the docs on how one might be able to run an example. Downloaded the 5.0.2 library and extracted foundation.min.js. Now in the docs it mentions you also need to extract the individual plugins as well. Well guess what I did that and it still didn&#8217;t work.</p>

<p>After digging around the code I realized that the authors already has it in the minifieid version &#8211; by including the library again it somehow screws up and doesn&#8217;t work.</p>

<p>Removed the full <code>foundation.reveal.js</code> to make it work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails and adding an environment to headers]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/12/16/rails-and-adding-an-environment-to-headers/"/>
    <updated>2013-12-16T19:07:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/12/16/rails-and-adding-an-environment-to-headers</id>
    <content type="html"><![CDATA[<p>One of the more annoying things that happens when you have multiple environements is that when a mail comes in, you don&#8217;t really know what is what. Therefore it&#8217;s smart to have an environment shown on the email headers so you don&#8217;t accidentally confuse it with the live system. To do that is relatively trivial:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># base_mailer.rb
</span><span class='line'>class BaseMailer &lt; ActionMailer::Base
</span><span class='line'>
</span><span class='line'>    default from: "hello@venuespot.co" #TODO move these out
</span><span class='line'>    default to: "tom@venuespot.co"
</span><span class='line'>
</span><span class='line'>    def mail(headers={}, &block)
</span><span class='line'>
</span><span class='line'>        unless Rails.env == 'production'
</span><span class='line'>            headers[:subject].insert(0, "[#{Rails.env}] - ")
</span><span class='line'>        end
</span><span class='line'>
</span><span class='line'>        super(headers, &block)
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>And then just extend that class instead of the the default <code>ActionMailer::Base</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure and Confluence firewall rule setup problem and solution]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/12/15/azure-and-confluence-firewall-rule-setup/"/>
    <updated>2013-12-15T21:37:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/12/15/azure-and-confluence-firewall-rule-setup</id>
    <content type="html"><![CDATA[<p>Our company, VenueSpot.co has a Bizspark account from Microsoft which gives us $150/mn server credit for 3 years. Thanks Microsoft!</p>

<p>However I had to spend some time trying to configure the server esp with the ports so they play nicely. First off you have to enable your firewall, either doing it through <code>iptables</code> or <code>ufc</code>. Initially, I did it using the latter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ufw enable
</span><span class='line'>sudo ufw allow 8090</span></code></pre></td></tr></table></div></figure>


<p>So far, so good. I then proceeded to the Azure admin interface to map the port from 8090 => 8090. Guess what that doesn&#8217;t work (at least not for me.)</p>

<p>After some experimentation I go it to work by removing the port 80 => 80 mapping, and instead I created a new mapping that points 80 => 8090.</p>

<p>Coming from an AWS background, this made no sense. Surely I should be able to open any port I wanted&#8230;however that didn&#8217;t work for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secret Ingredient to a co-founder's success - Love]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/12/15/secret-ingredient-to-a-co-founders-success-love/"/>
    <updated>2013-12-15T01:09:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/12/15/secret-ingredient-to-a-co-founders-success-love</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been writing a lot of technical stuff previously and it has come to my attention that sooner or later I will have to write about the high level stuff. So let&#8217;s talk about one of the things that is dear and close to me - my significant other. I&#8217;ll have to admit, I joke with ex-coworkers about how much she needs me, but deep down inside she is my rock and without her I would probably have lost focus by now. I have a letter that is addressed to her that I&#8217;d like to share.</p>

<blockquote><p>To my hunny,</p>

<p>I&#8217;m writing to you on my first day of unemployment. Do you remember the last time I was unemployed? I did&#8230;you had to carry our butts for 2 years until I was done school. Fast forward 7 years and here we are all over again&#8230;only this time the stakes are higher.</p>

<p>I feel like this is such a turning point in our lives and I really want to express how thankful I am to have you by my side through thick and thin. You are my everything and I can&#8217;t imagine not having you with me on this journey.</p>

<p>I know the next few months/years will not be easy so I apologize in advance right now for all the hardships that will be coming up. I apologize for those late working nights where I won&#8217;t be able to spend alone time with you. I apologize for all nights that we&#8217;re apart together because I&#8217;m travelling for business. I apologize for all the stupid things I&#8217;ll say after a long day at work. I apologize for boring you with all my talk about how using Puma is better than Unicorn for our Rails server implementation. And last but not least I apologize in advance for making all the sacrifices that you make in order for me to chase my dreams. Please still cook for me during those times.</p>

<p>Now I know there will be some rainy days up ahead but I&#8217;ll hold you tight under my umbrella and we&#8217;ll laugh it off. There will also be those freezing days but in those times I&#8217;ll hold you tighter and we&#8217;ll laugh even harder. I want you to know that whatever the weather is, the sun is always above. In those stormy days I want you to remember those sunny tunes and let these great memories carry us through. Please try to be patient with me and still laugh at my corny jokes. There will also be times where the business doesn&#8217;t go the way we planned and I promise not to let that jeopardize the special relationship that we have. I love you with all my heart and soul and I am so grateful that you are mine. Life is a journey and although sometimes there are obstacles along the way, we will look back and realize that sometimes it&#8217;s not important where we end up, but how we got there.</p>

<p>Love,</p>

<p>Tommy</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jasmine Spies on a 2nd level object]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/12/03/jasmine-spies-on-a-2nd-level-object/"/>
    <updated>2013-12-03T16:03:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/12/03/jasmine-spies-on-a-2nd-level-object</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been trying to mock a 2 level object that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    mockSoundService = {
</span><span class='line'>        getSound: function () {
</span><span class='line'>            return {
</span><span class='line'>                volume: function () {
</span><span class='line'>                }
</span><span class='line'>            };
</span><span class='line'>        }
</span><span class='line'>    };</span></code></pre></td></tr></table></div></figure>


<p>Naturally, I thought it would work with something like this in my test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    spyOn(mockSoundService.getSound(), 'volume');
</span><span class='line'>    service.closeIntroVideo();
</span><span class='line'>
</span><span class='line'>    expect(service.getPlayer()).toBeNull();
</span><span class='line'>    expect(mockSoundService.getSound().volume).toHaveBeenCalled();</span></code></pre></td></tr></table></div></figure>


<p>However, I kept getting errors like these:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Expected a spy, but got undefined.</span></code></pre></td></tr></table></div></figure>


<p>It turns out that you need to break apart the 2nd level object that was nested. Therefore the final product should look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    mockSound = {
</span><span class='line'>        volume: function () {
</span><span class='line'>        }
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    mockSoundService = {
</span><span class='line'>        getSound: function () {
</span><span class='line'>            return mockSound;
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>and now in your mocks you can do something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    spyOn(mockSound, 'volume');
</span><span class='line'>    spyOn(mockState, 'go');
</span><span class='line'>    service.closeIntroVideo();</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Add a custom migrate script for running migrations in another location.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/10/21/rails-add-a-custom-migrate-script-for-running-migrations-in-another-location/"/>
    <updated>2013-10-21T19:14:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/10/21/rails-add-a-custom-migrate-script-for-running-migrations-in-another-location</id>
    <content type="html"><![CDATA[<p>I am currently in the process of refactoring some code in a Rails project for a client, and one of the things that I wanted to do was to separate the database migration scripts that are from the base frameworks (Discourse was used as the base) and the ones I will be adding. This will give a good historical view of all the custom migrations so we don&#8217;t have to go through each one. But in order to do that I had to write my own custom rake task to rake the rake tasks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>namespace :db do
</span><span class='line'>    desc "Migrate the database by going through the standard migrate folder first, then the custom 1017 folder (options: VERSION=x, VERBOSE=false, SCOPE=blog)."
</span><span class='line'>    task :custom_migrate =&gt; [:environment, :load_config] do
</span><span class='line'>        ActiveRecord::Migration.verbose = ENV["VERBOSE"] ? ENV["VERBOSE"] == "true" : true
</span><span class='line'>        ActiveRecord::Migrator.migrate(ActiveRecord::Migrator.migrations_paths, ENV["VERSION"] ? ENV["VERSION"].to_i : nil) do |migration|
</span><span class='line'>            ENV["SCOPE"].blank? || (ENV["SCOPE"] == migration.scope)
</span><span class='line'>        end
</span><span class='line'>        ActiveRecord::Migrator.migrate('db/migrate/1017', ENV["VERSION"] ? ENV["VERSION"].to_i : nil) do |migration|
</span><span class='line'>            ENV["SCOPE"].blank? || (ENV["SCOPE"] == migration.scope)
</span><span class='line'>        end
</span><span class='line'>
</span><span class='line'>        Rake::Task['db:_dump'].invoke
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Notice the last line where it delegates out to the <code>db:_dump</code> task. This is important as it writes out the schema as the end step.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3: joins and not ins]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/10/05/rails-3-joins-and-not-ins/"/>
    <updated>2013-10-05T14:26:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/10/05/rails-3-joins-and-not-ins</id>
    <content type="html"><![CDATA[<p>So I needed to write a complexish query for one of the queries for (VenueSpot.co)|[http://www.venuespot.co]. As we are only running a small instance on aws, I didn&#8217;t to waste time by traversing through my related models using <code>each</code>. I wanted to write a couple of more optimizing queries using the <code>joins</code> keyword and the NOT IN mechanism. At the end it looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@events = Event.joins(:event_durations).where("events.state = ? and is_published = ? and event_durations.start_date &gt; ? and events.id NOT IN (?)", 'active', true, DateTime.now, @previous_venue_bid_ids).group('events.id')</span></code></pre></td></tr></table></div></figure>


<p>One thing that tripped me up was that initially my <code>@previous_venue_bid_ids</code> was a string that had all the ids, but the api actually takes in an array of the ids, so just be really sure what you are passing is correct!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wrong number of arguments (1 for 0)]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/09/16/wrong-number-of-arguments-1-for-0/"/>
    <updated>2013-09-16T18:22:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/09/16/wrong-number-of-arguments-1-for-0</id>
    <content type="html"><![CDATA[<p>So I&#8217;ve started getting the following error message when I started a json service that reads a model which is fog enabled (with s3):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wrong number of arguments (1 for 0) at messages.json.rabl where line #1 raised:</span></code></pre></td></tr></table></div></figure>


<p>I wasn&#8217;t getting this before, so what gives?</p>

<h1>Solution:</h1>

<p>It turned out that I was doing this to get the asset path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>model.asset</span></code></pre></td></tr></table></div></figure>


<p>However, that only returns the AssetUploader instance, so when it tried to render it, it gave me the error. If you want just the path to s3, you will need the <code>to_s</code> appended to the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS: using the $event for an a tag can cause problems.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/09/01/angularjs-using-the-%24event-for-an-a-tag-can-cause-problems/"/>
    <updated>2013-09-01T12:01:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/09/01/angularjs-using-the-$event-for-an-a-tag-can-cause-problems</id>
    <content type="html"><![CDATA[<p>So I was troubleshooting a bug on one of the projects that uses AngularJS. Consider this markup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://tommytcchan.github.com/fooPage" data-ng-click="show($event)"&gt;&lt;span&gt;foobar!&lt;/span&gt;&lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p>In the js, this was what was declared:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$scope.show = function (event) {
</span><span class='line'>  var href = event.target.href;
</span><span class='line'>  ...
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Now, the interesting thing about this is that it <em>sometimes</em> works. The reason is that if you click on the link outside of the <span>, then the event.target resolves to the <a> tag. However, if you click within the span, then the event.target is the <span> tag, and there is no href there, thus throwing an error.</p>

<p>The fix:</p>

<p>The solution is actually pretty simple. Instead of using <code>event.target</code>, use <code>event.currentTarget</code>. That resolves to the <a> and it will work for all cases.</p>

<p>Hope that helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set up SMTP to send mail on Postfix on Ubuntu 12.10]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/30/set-up-smtp-to-send-mail-on-postfix-on-ubuntu-12-dot-10/"/>
    <updated>2013-08-30T13:52:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/30/set-up-smtp-to-send-mail-on-postfix-on-ubuntu-12-dot-10</id>
    <content type="html"><![CDATA[<p>I needed something quick to send emails for internal use. Basically it&#8217;s just a follow on <a href="https://help.ubuntu.com/community/Postfix">this</a> page. However, I needed to expose the email to the different clients on our internal network. There following two extra steps were needed:</p>

<p>1.) In your mail config, remove this line:</p>

<p>smtpd_use_tls=no</p>

<p>2.) In the same config, update this line:</p>

<p><code>mynetworks = 127.0.0.0/8 10.0.0.0/8</code></p>

<p>This tells that the smtp should be allowed on the network.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passenger Nginx and Rails and Thin - set up reverse proxy on a Thin server instance]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/12/passenger-nginx-and-rails-and-thin-set-up-reverse-proxy-on-a-thin-server-instance/"/>
    <updated>2013-08-12T13:22:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/12/passenger-nginx-and-rails-and-thin-set-up-reverse-proxy-on-a-thin-server-instance</id>
    <content type="html"><![CDATA[<p>My previous post talked about setting passenger and rails. In this post I will talk about something different - using Nginx as a reverse proxy while having one (or many) Thin server instances.</p>

<p>Basically the setup is the same as the previous post, except that you want to set up the server block a little differently:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upstream domain1 {
</span><span class='line'>  server 127.0.0.1:3000;
</span><span class='line'>  #server 127.0.0.1:3001;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>  listen 80;
</span><span class='line'>  server_name localhost;
</span><span class='line'>  root /home/tchan/repo/venuespot/public;   # &lt;--- be sure to point to 'public'!
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>      proxy_set_header  X-Real-IP  $remote_addr;
</span><span class='line'>      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>      proxy_set_header Host $http_host;
</span><span class='line'>      proxy_redirect off;
</span><span class='line'>
</span><span class='line'>      if (-f $request_filename/index.html) {
</span><span class='line'>          rewrite (.*) $1/index.html break;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      if (-f $request_filename.html) {
</span><span class='line'>          rewrite (.*) $1.html break;
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      if (!-f $request_filename) {
</span><span class='line'>          proxy_pass http://domain1;
</span><span class='line'>      break;
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Why might this be a better setup than using Passenger? Well Thin uses an evented model, so for long running blocking I/O operations, it might be good to set this up if you want more fine grain control. Just be sure to check that the Thin instances are still running periodically (or make sure you catch all exceptions in your app).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passenger]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/12/passenger/"/>
    <updated>2013-08-12T12:52:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/12/passenger</id>
    <content type="html"><![CDATA[<p>I&#8217;m setting up our beta site for <a href="http://venuespot.co">venuespot</a>, and one of the golden rules is that everything should be as close to the production site as possible.</p>

<p>Here are the instructions for how to use passenger with nginx and rails (3.2.11) on Ubuntu 12.10. I did read the docs but I found that it was missing a few things, so hopefully this tutorial will address your problems. See the section on Troubleshooting for more solutions to the problems I encountered.</p>

<h1>Introduction</h1>

<p>First, you will want to install passenger:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install passenger</span></code></pre></td></tr></table></div></figure>


<p>(Optional). Then, you would want to get the latest rvm:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm get latest
</span><span class='line'>rvm reload</span></code></pre></td></tr></table></div></figure>


<p>Now install nginx with the passenger mod:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvmsudo passenger-install-nginx-module
</span><span class='line'>(If the above fails, then you will need to update your rvm.)</span></code></pre></td></tr></table></div></figure>


<p>Now get the libcurl (or whatever it tells you) library.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install libcurl4-openssl-dev</span></code></pre></td></tr></table></div></figure>


<p>Okay, we&#8217;re at the halfway point. Next we should edit the nginx config file at <code>/opt/nginx/conf/nginx.conf</code>. Remove the original <code>server</code> block and add the following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name localhost;
</span><span class='line'>    root /yourwebapp/public; # &lt;--- be sure to point to 'public'!
</span><span class='line'>    passenger_enabled on;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>passenger_pre_start http://localhost/;
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to make sure the nginx process can have 777 access to config.ru and make sure all the way up the path we have 777 as well.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 777 /yourwebapp
</span><span class='line'>chmod 777 config.ru </span></code></pre></td></tr></table></div></figure>


<p>Now create the nginx init script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
</span><span class='line'>mv init-deb.sh /etc/init.d/nginx
</span><span class='line'>chmod +x /etc/init.d/nginx
</span><span class='line'>/usr/sbin/update-rc.d -f nginx defaults</span></code></pre></td></tr></table></div></figure>


<p>Now start the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/init.d/nginx start</span></code></pre></td></tr></table></div></figure>


<p>There you have it folks! Navigate to localhost and you should see your site!</p>

<h1>Troubleshooting</h1>

<p>In the event that you don&#8217;t see anything, you should check your logs in <code>/opt/nginx/logs</code> to ensure everything was done correctly.</p>

<p>For example, you might see this: <code>Error page:
Could not find amq-client-1.0.2 in any of the sources (Bundler::GemNotFound)</code></p>

<p>This means your gems have not been installed. Do a bundle install in your rails dir</p>

<p>Or, you might see somethign like this: <code>terminate called after throwing an instance of 'Passenger::FileSystemException'
  what():  Cannot stat '/yourwebapp/config.ru': Permission denied (errno=13)
</code></p>

<p>This means you need to set your permissions correctly for the whole path (see above).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec and Devise: not hitting controller action.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/11/rspec-and-devise-not-hitting-controller-action/"/>
    <updated>2013-08-11T12:26:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/11/rspec-and-devise-not-hitting-controller-action</id>
    <content type="html"><![CDATA[<p>Okay so I ran into another problem. Just when I thought I got it figured out with the <code>sign_in</code> helper provided from the page in the previous post, a gaint boulder fell right in front of me. For whatever reason, the test method will not call into my controller method under test.</p>

<p>This is what I had originally:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>before (:each) do
</span><span class='line'>  sign_in users(:organizer)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>describe "GET new with no bid id" do
</span><span class='line'>  it "returns not found" do
</span><span class='line'>      get :new, {}, valid_session
</span><span class='line'>      flash[:error].should equal('error')
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Pretty straight forward one would persume right? Wrong!</p>

<p>Upon more digging around, I realized that Devise&#8217;s helpers are overridding the session variables, and so if we do <code>get :new, {}, valid_session</code>, the valid_session will override what was put into the session, causing issues with &#8216;signing in&#8217;. Therefore the solution is to remove that. If you still need to populate a session, click <a href="http://stackoverflow.com/a/9658682/151899">here</a> for a workaround.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails unit test: NoMethodError: undefined method authenticate for nil:NilClass]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/11/rails-unit-test-nomethoderror-undefined-method-authenticate-for-nil-nilclass/"/>
    <updated>2013-08-11T11:45:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/11/rails-unit-test-nomethoderror-undefined-method-authenticate-for-nil-nilclass</id>
    <content type="html"><![CDATA[<p>I&#8217;ve started foraying out of the standard MiniTest framework and into rspec, since I&#8217;ve been writing a lot more Jasmine unit tests lately. One of the very first things I got (unfortunately) was this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NoMethodError: undefined method `authenticate!' for nil:NilClass</span></code></pre></td></tr></table></div></figure>


<p>Luckily, the devise docs tells you exactly what&#8217;s wrong on their docs <a href="https://github.com/plataformatec/devise#test-helpers">page</a> regarding test helpers. So if you are seeing the same issue, consult their docs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS: problem with factory/service methods not returning singletons!]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/07/18/angularjs-problem-with-factory-slash-service-methods-not-returning-singletons/"/>
    <updated>2013-07-18T18:31:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/07/18/angularjs-problem-with-factory-slash-service-methods-not-returning-singletons</id>
    <content type="html"><![CDATA[<p>I was looking at an issue today where for the life of me I could not figure out why my controllers are being returned different instances. I even went as far as creating a <a href="http://plnkr.co/edit/QLK8zX827c9SI3lSWXXj">plunkr</a> to proof that I was not insane!</p>

<p>I went back to the drawing board and looked at the code. How could they possibly be different? And then I saw it&#8230; I had something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                 angular.bootstrap(document.getElementById("content"), ["app.services"]);</span></code></pre></td></tr></table></div></figure>


<p>Upon reading the angular docs a little bit more, I realized that by calling multiple initializations, we actually create new instances of services/factories, so they are actually not singletons anymore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: using link_to to include icons.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/07/01/rails-using-link-to-to-include-icons/"/>
    <updated>2013-07-01T17:04:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/07/01/rails-using-link-to-to-include-icons</id>
    <content type="html"><![CDATA[<p>So I was trying to make my links look pretty by adding the <code>icon-*</code> classes to the link. However I was using the <code>link_to</code> method and it was not clear reading the docs how to do that. Luckily I figured it out:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= link_to '&lt;i class="icon-remove"&gt;&lt;/i&gt;'.html_safe, message, {:method =&gt; :delete, :class =&gt; 'btn btn-small'}%&gt;</span></code></pre></td></tr></table></div></figure>


<p>Pretty awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mvn grails plugin: run test coverage]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/06/24/mvn-grails-plugin-run-test-coverage/"/>
    <updated>2013-06-24T17:58:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/06/24/mvn-grails-plugin-run-test-coverage</id>
    <content type="html"><![CDATA[<p>I was stuck on how to pass the <code>-coverage</code> variable into a mavenized grails project. After looking from the inter web I got this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn grails:exec -Dcommand=test-app -Dargs=-coverage</span></code></pre></td></tr></table></div></figure>


<p>That did the trick. Thanks Google!</p>
]]></content>
  </entry>
  
</feed>
