<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: unit-testing | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/unit-testing/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-03-14T20:13:39-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Caution: Testing Grails filter while overriding the request/response object in the setup().]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/15/caution-testing-grails-filter-while-overriding-the-request-slash-response-object-in-the-setup/"/>
    <updated>2013-03-15T12:34:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/15/caution-testing-grails-filter-while-overriding-the-request-slash-response-object-in-the-setup</id>
    <content type="html"><![CDATA[<p>So I'm doing some testing on the filter recently, and I of the things I notice right away was that the previous committer had initializers all over the place:
```
void test_filters_all_with_no_utmParams_noSession_with__invalid_Cookie() {</p>

<pre><code>    FilterConfig filter = findConfig('all')

    def request = new MockHttpServletRequest()
    def response = new MockHttpServletResponse()
    setUpWebCookieService(request, response)

    request.session = createSession(null, null, 'true')
    request.cookies = [new Cookie('blah')]
</code></pre>

<p>...
```
So I thought, why not just put of the same declarations on the setup method()? Well, it turns out that Grails dynamic closures will clobber the request/response variables. When I ran the tests with the declarations in the setup, no matter what I do I was not able to set my variable.</p>

<p>After some digging around, I realized one thing:</p>

<ol>
<li>The test already injects the request/response objects in your filter tests, so overriding actually causes problems, leading to my variables not being set on the correct request/response instance.</li>
</ol>


<p>I'll let you decide what's best for yourself.</p>
]]></content>
  </entry>
  
</feed>
