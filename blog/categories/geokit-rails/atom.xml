<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: geokit-rails | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/geokit-rails/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-03-17T23:57:39-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails and geokit acts_as_mappable through not working]]></title>
    <link href="http://tommytcchan.github.com/blog/2014/01/08/rails-and-geokit-acts-as-mappable-through-not-working/"/>
    <updated>2014-01-08T17:04:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2014/01/08/rails-and-geokit-acts-as-mappable-through-not-working</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.venuespot.co">venuespot</a>, we are using a matching algorithm to ensure that we match relevant information with the venues. One of the things is using a distance calculator with geokit. In the examples it talks about how one can use the <code>acts_as_mappable</code> to ensure your model has access to the right methods.</p>

<p>It also talked about it is able to use the <code>:through</code> mechanism. Here's the example they provided:</p>

<p>```
class Location &lt; ActiveRecord::Base
  belongs_to :locatable, :polymorphic => true
  acts_as_mappable
end</p>

<p>class Company &lt; ActiveRecord::Base
  has_one :location, :as => :locatable  # also works for belongs_to associations
  acts_as_mappable :through => :location
end
```</p>

<p>However, my model isn't using polymorphic belongs_to (yet), but in theory I should be able to do something like this:</p>

<p><code>
Company.within(distance, :origin =&gt; @somewhere)
</code></p>

<p>However, this proved to be a problem because the db didn't like it:</p>

<p><code>
SELECT `venues`.*,
 (ACOS(least(1,COS(0.8595746566072073)*COS(-2.1485003092050197)*COS(RADIANS(locations.lat))*COS(RADIANS(locations.lng))+
 COS(0.8595746566072073)*SIN(-2.1485003092050197)*COS(RADIANS(locations.lat))*SIN(RADIANS(locations.lng))+
 SIN(0.8595746566072073)*SIN(RADIANS(locations.lat))))*3963.19)
 AS distance FROM `locations` WHERE ((locations.lat&gt;48.38258088287847 AND locations.lat&lt;50.11741911712155 AND locations.lng&gt;-124.42871224851768 AND locations.lng&lt;-121.7712877514823)) AND ((
 (ACOS(least(1,COS(0.8595746566072073)*COS(-2.1485003092050197)*COS(RADIANS(locations.lat))*COS(RADIANS(locations.lng))+
 COS(0.8595746566072073)*SIN(-2.1485003092050197)*COS(RADIANS(locations.lat))*SIN(RADIANS(locations.lng))+
 SIN(0.8595746566072073)*SIN(RADIANS(locations.lat))))*3963.19)
 &lt;= 60)) //problem with locations not found
</code></p>

<h1>The solution</h1>

<p>It turns out that I needed to include the associated association in order for it to know what it's matching on:</p>

<p>```</p>

<pre><code>Venue.includes(:location).within(radius, :origin =&gt; [lat, lng]).all.each do |venue|
    ...
end
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
