<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: setup | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/setup/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2013-10-05T14:39:38-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Passenger]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/12/passenger/"/>
    <updated>2013-08-12T12:52:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/12/passenger</id>
    <content type="html"><![CDATA[<p>I'm setting up our beta site for <a href="http://venuespot.co">venuespot</a>, and one of the golden rules is that everything should be as close to the production site as possible.</p>

<p>Here are the instructions for how to use passenger with nginx and rails (3.2.11) on Ubuntu 12.10. I did read the docs but I found that it was missing a few things, so hopefully this tutorial will address your problems. See the section on Troubleshooting for more solutions to the problems I encountered.</p>

<h1>Introduction</h1>

<p>First, you will want to install passenger:
<code>
gem install passenger
</code>
(Optional). Then, you would want to get the latest rvm:
<code>
rvm get latest
rvm reload
</code></p>

<p>Now install nginx with the passenger mod:
<code>
rvmsudo passenger-install-nginx-module
(If the above fails, then you will need to update your rvm.)
</code>
Now get the libcurl (or whatever it tells you) library.
<code>
apt-get install libcurl4-openssl-dev
</code></p>

<p>Okay, we're at the halfway point. Next we should edit the nginx config file at <code>/opt/nginx/conf/nginx.conf</code>. Remove the original <code>server</code> block and add the following</p>

<p>```
server {</p>

<pre><code>listen 80;
server_name localhost;
root /yourwebapp/public; # &lt;--- be sure to point to 'public'!
passenger_enabled on;
</code></pre>

<p>}</p>

<p>passenger_pre_start http://localhost/;</p>

<p>```</p>

<p>Next, we need to make sure the nginx process can have 777 access to config.ru and make sure all the way up the path we have 777 as well.</p>

<p><code>
chmod 777 /yourwebapp
chmod 777 config.ru
</code></p>

<p>Now create the nginx init script:</p>

<p><code>
wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
mv init-deb.sh /etc/init.d/nginx
chmod +x /etc/init.d/nginx
/usr/sbin/update-rc.d -f nginx defaults
</code></p>

<p>Now start the server:
<code>
/etc/init.d/nginx start
</code></p>

<p>There you have it folks! Navigate to localhost and you should see your site!</p>

<h1>Troubleshooting</h1>

<p>In the event that you don't see anything, you should check your logs in <code>/opt/nginx/logs</code> to ensure everything was done correctly.</p>

<p>For example, you might see this: <code>Error page:
Could not find amq-client-1.0.2 in any of the sources (Bundler::GemNotFound)</code></p>

<p>This means your gems have not been installed. Do a bundle install in your rails dir</p>

<p>Or, you might see somethign like this: <code>terminate called after throwing an instance of 'Passenger::FileSystemException'
  what():  Cannot stat '/yourwebapp/config.ru': Permission denied (errno=13)
</code></p>

<p>This means you need to set your permissions correctly for the whole path (see above).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example: How to set up debugging with Karma (formerly Testacular) and Webstorm]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/18/example-how-to-set-up-debugging-with-karma-formerly-testacular-and-webstorm/"/>
    <updated>2013-03-18T19:50:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/18/example-how-to-set-up-debugging-with-karma-formerly-testacular-and-webstorm</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>This is a test application (uses the default PhoneCat app) but it uses mocha to test the the http service.</p>

<h1>Debugging</h1>

<p>I'm using Webstorm to perform debugging. But to do this you will need to install <a href="http://karma-runner.github.com/0.8/intro/installation.html">Karma</a>, which is essentially Testacular 2.0.</p>

<h1>Set up</h1>

<p>To set this up, refer to the screenshots provided:</p>

<h6>Step 1:</h6>

<p>Create the Node js runner according to the screen shot.</p>

<p>http://screencloud.net/v/ERqK</p>

<h6>Step 2:</h6>

<p>Create the Debug configuration according to the screen shot. Note that the port will be the port that you Karma server ran on for the Node.js configuration you defined for Step 1.</p>

<p>http://screencloud.net/v/3sH0</p>

<h6>Step 3:</h6>

<p>Start the Node.js run, then start the Debug configuration after you set some breakpoints.</p>

<p>http://screencloud.net/v/2oGA</p>

<p>Read more at:
https://github.com/tommytcchan/js-test-examples/tree/master/angularjs/testing/mocha</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache2: Negotiation: discovered file(s) matching request: ...yi (None could be negotiated)]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/28/apache2-negotiation-discovered-file-s-matching-request-dot-dot-dot-yi-none-could-be-negotiated/"/>
    <updated>2013-02-28T20:32:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/28/apache2-negotiation-discovered-file-s-matching-request-dot-dot-dot-yi-none-could-be-negotiated</id>
    <content type="html"><![CDATA[<p>I received this message in my apache logs while accessing a rewrite on PHP 5.4:
<code>
[Thu Feb 28 20:29:44 2013] [error] [client 127.0.0.1] Negotiation: discovered file(s) matching request: /home/ad/repo/yii/backend (None could be negotiated).
</code></p>

<p>It turned out that I needed to add an extra type defn for PHP 5.4:
<code>
AddType application/x-httpd-php .php
</code></p>

<p>source: http://serverfault.com/questions/372733/apache-file-negotiation-failed</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache2: hosting sever from a user directory requires x7x permission]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/28/apache2-hosting-sever-from-a-user-directory-requires-x7x-permission/"/>
    <updated>2013-02-28T20:07:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/28/apache2-hosting-sever-from-a-user-directory-requires-x7x-permission</id>
    <content type="html"><![CDATA[<p>I've been experimenting running a webapp in a a directory where I host my code, and in order for the server to read the dir, the base directory had to be x7x, such as
<code>
sudo chmod 774 repo
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: create a deploy script with ease]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/23/rails-create-a-deploy-script-with-ease/"/>
    <updated>2013-02-23T16:51:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/23/rails-create-a-deploy-script-with-ease</id>
    <content type="html"><![CDATA[<p>I was finding myself having to deploy manually everytime I push something to github, so I've decided to write a deploy shell script to help with this task. Coming from a Java background, I found that creating a deploy script for rails is so much easier. Here is the meat of it:</p>

<p>In deploy.sh</p>

<p>```</p>

<h1>!/bin/bash</h1>

<h1>first kill the server if its running</h1>

<p>kill -9 <code>lsof -i :80 | awk '{if (NR!=1) {print $2}}'</code>
pushd ~/codetipdaily</p>

<h1>then pull from gh</h1>

<p>git pull origin master</p>

<h1>assets</h1>

<p>rake assets:clean
rake assets:precompile</p>

<h1>start server as daemon</h1>

<p>rails server -e production -p 80 --daemon
popd
```</p>

<p>That was a piece of cake!</p>
]]></content>
  </entry>
  
</feed>
