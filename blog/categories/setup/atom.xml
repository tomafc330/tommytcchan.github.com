<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: setup | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/setup/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-08-19T12:17:06-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Rails with Mixpanel on both the front end and back end]]></title>
    <link href="http://tommytcchan.github.com/blog/2014/01/05/setting-up-rails-with-mixpanel-on-both-the-front-end-and-back-end/"/>
    <updated>2014-01-05T17:12:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2014/01/05/setting-up-rails-with-mixpanel-on-both-the-front-end-and-back-end</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.venuespot.co">venuespot</a>, we use Mixpanel. We've had an account for awhile actually, but didn't really do anything with it. I upgraded our GA to use the new GA script, and needless to say the events management isn't that great. That prompted me to look at Mixpanel again. In this article I will explain how one is able to set up events to track individual users going through the system without too much intrusive work.</p>

<h1>The Requirements</h1>

<p>We need a few things we wanted to use with our app:
1.  We want to track the different events that a user takes throughout our site, whether they are logged in or not.
2.  We wanted to blanket track <strong>all</strong> events, such as going to a controller#action.
3.  We don't want it to affect the performance of our system too much, which meant hooking into Sidekiq for asynchronous processing.</p>

<h1>The approach</h1>

<p>If you followed the Mixpanel recommendations, they advise you to use the JavaScript library. This was a little limiting for us as we want to track when we send out emails and notifications to the users. So we took a 2 pronged approach:
1.  If the user isn't signed in and is just browsing our site, we track those events with the JS client library.
2.  Once they have signed up/in though, we will use server side calls to track the events in an async manner.</p>

<h1>The Setup</h1>

<p>You will need a few things:
1.  Sign up with Mixpanel, and install the javascript.
2.  Place the javascript in your asset pipeline folder and reference it:
```</p>

<h1>application.js</h1>

<p>//= require mixpanel/mixpanel
```</p>

<h1>The implementation</h1>

<p>So let's start with the part where the user is not logged in but we want to track their actions. We need to tell mixpanel that a new user on our site. Now we will be using <code>localStorage</code> to store our anonymous user.
```</p>

<h1>venuespot_tracker.js</h1>

<p>function VenueSpotTracker() {</p>

<pre><code>this.createOrGetUser = function () {
    //check to see if localStorage is defined, omitted for brevity's sake
    ...

    if (!localStorage.vs_user) {
        localStorage.vs_user = rand(12);
        mixpanel.identify(localStorage.vs_user);
        mixpanel.people.set({
            "$created": new Date(),
            "$last_login": new Date()
        });
    }
    return localStorage.vs_user;
};

this.homePageViewed = function() {
    this.createOrGetUser();
    this.track(document.location.pathname + ' page viewed'); //method omitted for brevity

    mixpanel.track_links("a", "Clicked Link", {
        referrer: document.referrer
    });
};
</code></pre>

<p>}</p>

<p>var vsTracker = new VenueSpotTracker();
...
vsTracker.homePageViewed();
```
A couple of interesting things...I omitted some of the code, I'm sure you can fill in the missing pieces.</p>

<p>Another interesting thing: if there is no user defined, we have to call <code>identify</code> and then set some attributes to let Mixpanel we want to track this anonymous user.</p>

<p>We also want to track all of the links the user clicks, so we use provided <code>track_links</code> method.</p>

<p>Once that's done, we just sit back and see the results: http://screencloud.net/v/jLLi</p>

<h3>Sending the info to the backend</h3>

<p>Okay, so far we've got stats on users who have not signed up. What happens when they sign up? We don't want to lose the previous history that they had, so we have to call the <code>alias</code> api method after they've logged in so that we can register them. For this we use the <code>mixpanel-ruby</code> gem.</p>

<p>Now you might be asking, why don't we just continue to use the JS library? Well I thought about this for a few minutes. If you did that, you would have to make sure that we send over the email down to the client. Also, any time you want to do any tracking you would have to do the same. Finally we also wanted to track the history when we send out emails. That's a backend job so that makes it really difficult.</p>

<p>Hopefully I've convinced you of why we want to use the backend library.</p>

<ol>
<li><p>First thing is to include the gem in your gemfile.
<code>
gem 'mixpanel-ruby'
</code></p></li>
<li><p>Now on the sign up flow, you have to add in a hidden field to the back end registration:
```
$(document).ready(function() {
$('<input>').attr({</p>

<pre><code>type: 'hidden',
id: 'mix_panel_temp_id',
name: 'mix_panel_temp_id',
value: venuespotTracker.createOrGetUser()
</code></pre>

<p>}).appendTo('form');
});
```</p></li>
</ol>


<p>We need this because we want to do the alias in the controller:</p>

<p>```</p>

<h1>create</h1>

<p>def create
...</p>

<pre><code>    MixpanelAliasWorker.perform_async(@user.email, params[:mix_panel_temp_id], @user.first_name, @user.last_name, @user.phone, @user.type)
</code></pre>

<p>end
```</p>

<p>Notice here we are using Sidekiq to perform our linking in an async manner. The Mixpanel api has a few methods to do with async, but I feel that this is an easier approach.</p>

<p>In MixpanelAliasWorker, this is what happens:</p>

<p>```
require 'mixpanel-ruby'</p>

<h1>Does alias and link up the email address</h1>

<p>class MixpanelAliasWorker</p>

<pre><code>include Sidekiq::Worker

def mixpanel()
    Mixpanel::Tracker.new(ENV['mix_panel'])
end

def perform(email, old_id, first_name, last_name, phone, user_type)
    tracker = mixpanel()
    tracker.alias email, old_id #synchrious call
    tracker.people.set(email, {
        '$first_name' =&gt; first_name,
        '$last_name' =&gt; last_name,
        '$email' =&gt; email,
        '$phone' =&gt; phone,
        'User Type' =&gt; user_type
    });
end
</code></pre>

<p>end
```</p>

<p>What happens here is that when a user is registered, we alias the old temp id we created in the front end with the actual email.</p>

<p>Once we do that then Mixpanel will now associate all new events with that email with the previous 'anonymous' user.</p>

<ol>
<li>Now that we have the user correctly linked, the next step is to track all of the events. For that we will go into the <code>ApplicationController</code> and add this method:
```
def track_with_mixpanel

<pre><code>if (current_user)

    if params[:id]
        instance = controller_name.classify.constantize.find(params[:id])
        id = instance.respond_to?(:name) ? instance.name : params[:id]
    end

    MixpanelTrackWorker.perform_async(current_user.email, "Page View - #{self.class.to_s}##{self.instance_variable_get('@_action_name')} #{id}", { :controller =&gt; 'test', :action =&gt; 'test'})
end
</code></pre>

<p>end
```</p></li>
</ol>


<p>Let me explain what this does. We check that the current user exists, and also check if there is a params[:id]. If there is, we want to know which model that belongs to.</p>

<p>Rails is pretty awesome because you can actually find that out by using <code>controller_name.classify</code>, and then make that into a constant, and finally invoke it to find the model.</p>

<p>I know this isn't scalable if we have tens of thousands of users, but our stage we value metrics so in the future this will have to be modified, but it gives us a good tracking for a user and all the actions they do once they are signed in.</p>

<p>Here's an example: http://screencloud.net/v/kLnw</p>

<p>So there you have it folks. Ping me if you have any issues with setting this up!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passenger]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/12/passenger/"/>
    <updated>2013-08-12T12:52:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/12/passenger</id>
    <content type="html"><![CDATA[<p>I'm setting up our beta site for <a href="http://venuespot.co">venuespot</a>, and one of the golden rules is that everything should be as close to the production site as possible.</p>

<p>Here are the instructions for how to use passenger with nginx and rails (3.2.11) on Ubuntu 12.10. I did read the docs but I found that it was missing a few things, so hopefully this tutorial will address your problems. See the section on Troubleshooting for more solutions to the problems I encountered.</p>

<h1>Introduction</h1>

<p>First, you will want to install passenger:
<code>
gem install passenger
</code>
(Optional). Then, you would want to get the latest rvm:
<code>
rvm get latest
rvm reload
</code></p>

<p>Now install nginx with the passenger mod:
<code>
rvmsudo passenger-install-nginx-module
(If the above fails, then you will need to update your rvm.)
</code>
Now get the libcurl (or whatever it tells you) library.
<code>
apt-get install libcurl4-openssl-dev
</code></p>

<p>Okay, we're at the halfway point. Next we should edit the nginx config file at <code>/opt/nginx/conf/nginx.conf</code>. Remove the original <code>server</code> block and add the following</p>

<p>```
server {</p>

<pre><code>listen 80;
server_name localhost;
root /yourwebapp/public; # &lt;--- be sure to point to 'public'!
passenger_enabled on;
</code></pre>

<p>}</p>

<p>passenger_pre_start http://localhost/;</p>

<p>```</p>

<p>Next, we need to make sure the nginx process can have 777 access to config.ru and make sure all the way up the path we have 777 as well.</p>

<p><code>
chmod 777 /yourwebapp
chmod 777 config.ru
</code></p>

<p>Now create the nginx init script:</p>

<p><code>
wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
mv init-deb.sh /etc/init.d/nginx
chmod +x /etc/init.d/nginx
/usr/sbin/update-rc.d -f nginx defaults
</code></p>

<p>Now start the server:
<code>
/etc/init.d/nginx start
</code></p>

<p>There you have it folks! Navigate to localhost and you should see your site!</p>

<h1>Troubleshooting</h1>

<p>In the event that you don't see anything, you should check your logs in <code>/opt/nginx/logs</code> to ensure everything was done correctly.</p>

<p>For example, you might see this: <code>Error page:
Could not find amq-client-1.0.2 in any of the sources (Bundler::GemNotFound)</code></p>

<p>This means your gems have not been installed. Do a bundle install in your rails dir</p>

<p>Or, you might see somethign like this: <code>terminate called after throwing an instance of 'Passenger::FileSystemException'
  what():  Cannot stat '/yourwebapp/config.ru': Permission denied (errno=13)
</code></p>

<p>This means you need to set your permissions correctly for the whole path (see above).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example: How to set up debugging with Karma (formerly Testacular) and Webstorm]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/18/example-how-to-set-up-debugging-with-karma-formerly-testacular-and-webstorm/"/>
    <updated>2013-03-18T19:50:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/18/example-how-to-set-up-debugging-with-karma-formerly-testacular-and-webstorm</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>This is a test application (uses the default PhoneCat app) but it uses mocha to test the the http service.</p>

<h1>Debugging</h1>

<p>I'm using Webstorm to perform debugging. But to do this you will need to install <a href="http://karma-runner.github.com/0.8/intro/installation.html">Karma</a>, which is essentially Testacular 2.0.</p>

<h1>Set up</h1>

<p>To set this up, refer to the screenshots provided:</p>

<h6>Step 1:</h6>

<p>Create the Node js runner according to the screen shot.</p>

<p>http://screencloud.net/v/ERqK</p>

<h6>Step 2:</h6>

<p>Create the Debug configuration according to the screen shot. Note that the port will be the port that you Karma server ran on for the Node.js configuration you defined for Step 1.</p>

<p>http://screencloud.net/v/3sH0</p>

<h6>Step 3:</h6>

<p>Start the Node.js run, then start the Debug configuration after you set some breakpoints.</p>

<p>http://screencloud.net/v/2oGA</p>

<p>Read more at:
https://github.com/tommytcchan/js-test-examples/tree/master/angularjs/testing/mocha</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache2: Negotiation: discovered file(s) matching request: ...yi (None could be negotiated)]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/28/apache2-negotiation-discovered-file-s-matching-request-dot-dot-dot-yi-none-could-be-negotiated/"/>
    <updated>2013-02-28T20:32:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/28/apache2-negotiation-discovered-file-s-matching-request-dot-dot-dot-yi-none-could-be-negotiated</id>
    <content type="html"><![CDATA[<p>I received this message in my apache logs while accessing a rewrite on PHP 5.4:
<code>
[Thu Feb 28 20:29:44 2013] [error] [client 127.0.0.1] Negotiation: discovered file(s) matching request: /home/ad/repo/yii/backend (None could be negotiated).
</code></p>

<p>It turned out that I needed to add an extra type defn for PHP 5.4:
<code>
AddType application/x-httpd-php .php
</code></p>

<p>source: http://serverfault.com/questions/372733/apache-file-negotiation-failed</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache2: hosting sever from a user directory requires x7x permission]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/28/apache2-hosting-sever-from-a-user-directory-requires-x7x-permission/"/>
    <updated>2013-02-28T20:07:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/28/apache2-hosting-sever-from-a-user-directory-requires-x7x-permission</id>
    <content type="html"><![CDATA[<p>I've been experimenting running a webapp in a a directory where I host my code, and in order for the server to read the dir, the base directory had to be x7x, such as
<code>
sudo chmod 774 repo
</code></p>
]]></content>
  </entry>
  
</feed>
