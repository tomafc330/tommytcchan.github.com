<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2013-03-29T11:00:35-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: not serving assets on production.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/29/rails-not-serving-assets-on-production/"/>
    <updated>2013-03-29T10:57:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/29/rails-not-serving-assets-on-production</id>
    <content type="html"><![CDATA[<p>So I changed my environment to be production, and I had issues with serving static content. Since my app was a single page app, I needed this to work (didn't want to put nginx or apache in front of it).</p>

<p>The error I was getting was this:</p>

<p><code>
ActionController::RoutingError (No route matches [GET] "/"):
</code></p>

<p>I did this in another project and forgot that I need to set the following parameter in <code>production.rb</code>:</p>

<p><code>
  config.serve_static_assets = true
</code></p>

<p>All was good afterwards!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: undefined method... after a migration script change]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/28/rails-undefined-method-dot-dot-dot-after-a-migration-script-change/"/>
    <updated>2013-03-28T21:56:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/28/rails-undefined-method-dot-dot-dot-after-a-migration-script-change</id>
    <content type="html"><![CDATA[<p>So I updated my model by changing the migration script and then doing <code>rake db:drop</code> and ```rake db:create```` and thought I would be okay. However, when I started my app after I changed the view layer, I got something like this:</p>

<p><code>
undefined method `command_name' for #&lt;Shortcut:0x00000003c3b4e8&gt;
</code></p>

<p>What gives? It turned out that I also needed to modify <code>schema.rb</code> to create the initial table. So that is a good place to check out if you find yourself changing the migration data.</p>
]]></content>
  </entry>
  
</feed>
