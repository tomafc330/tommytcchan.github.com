<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: currying | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/currying/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2013-10-05T14:39:38-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Groovy: The way to populate a csv/excel file.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/08/groovy-the-way-to-populate-a-csv-slash-excel-file/"/>
    <updated>2013-03-08T13:52:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/08/groovy-the-way-to-populate-a-csv-slash-excel-file</id>
    <content type="html"><![CDATA[<p>I was working on a refactoring for a method that did csv export, and I found a prime a candidate for using the currying mechanism in Groovy.</p>

<p>Consider this example of the code before:</p>

<p>```</p>

<pre><code>def export = {
    final string[] csvcolumnheadings = ['game', 'campaign name', 'campaign medium', 'campaign code', 'campaign term', 'campaign content',
        'campaign source', 'additional paramter','status', 'created by', 'updated by', 'date created', 'last updated']

    ...

        campaigns.resultset.each { campaign -&gt;
            string[] row = new string[13]

            row[0] = campaign.game ? campaign.game : ''
            row[1] = campaign.campaignname ? campaign.campaignname : ''
            row[2] = campaign.type ? campaign.type.tostring() : ''
            row[3] = campaign.campaigncode ? campaign.campaigncode : ''
            row[4] = campaign.campaignterm ?: ''
            row[5] = campaign.campaigncontent?: ''
            row[6] = campaign.source ? campaign.source : ''
            row[7] = campaign.parameter ? campaign.parameter : ''
            row[8] = campaign.status.name ? campaign.status.name : ''
            row[9] = campaign.createdby ? campaign.createdby : ''
            row[10] = campaign.updatedby ? campaign.updatedby : ''
            row[11] = campaign.datecreated ? campaign.datecreated.getdatetimestring() : ''
            row[12] = campaign.lastupdated ? campaign.lastupdated.getdatetimestring() : ''

            csvwriter.writenext(row)
        }

    ...

}   
</code></pre>

<p>```</p>

<p>So what's the problem here? Well, I was adding a couple of fields to the export, and the problem is that there are 4 things I needed to do:
* Add it to the <code>csvcolumnheadings</code>
* Update the number of elements in decl of the array <code>row</code>
* Add the elements
* Update all the numberings</p>

<p>Also, it's not a very Groovy way of doing it. Come curryin to the rescue!</p>

<p>```</p>

<pre><code>def valRetrieveFunc = {fieldName, campaign -&gt;
        def result

        if (fieldName instanceof Closure) {
            result = fieldName(campaign)
        } else {
            result = campaign."${fieldName}"
        }

        return result ?: ''
    }

    final Map map = [
            'Game': valRetrieveFunc.curry('game'),
            'Campaign Name': valRetrieveFunc.curry('campaignName'),
            'Campaign Medium': valRetrieveFunc.curry({campaign -&gt; return campaign.type?.toString()}),
            'Campaign Code': valRetrieveFunc.curry('campaignCode'),
            'Campaign Term': valRetrieveFunc.curry('campaignTerm'),
            'Campaign Content': valRetrieveFunc.curry('campaignContent'),
            'Campaign Source': valRetrieveFunc.curry('source'),
            'Additional Paramter': valRetrieveFunc.curry('parameter'),
            'Status': valRetrieveFunc.curry({campaign -&gt; return campaign.status?.name}),
            'Created By': valRetrieveFunc.curry('createdBy'),
            'Updated By': valRetrieveFunc.curry('updatedBy'),
            'Date Created': valRetrieveFunc.curry({campaign -&gt; return campaign.dateCreated?.getDateTimeString()}),
            'Last Updated': valRetrieveFunc.curry({campaign -&gt; return campaign.lastUpdated?.getDateTimeString()})]

    final String[] csvColumnHeadings = map.keySet()

    ...

        campaigns.resultSet.each { campaign -&gt;
            def row = []
            csvColumnHeadings.each({
                row &lt;&lt; map[it](campaign)
            })

            csvWriter.writeNext(row.toArray() as String[])
        }

    ...                 
</code></pre>

<p>```</p>

<p>Let me annotate this a little bit. The first thing we define was a func on how to get the parameter from the domain object. Notice for complex retrievals we can pass in a closure to how to fetch the object graph. The more important bit here is the <code>curry</code> method, which defines a new closure with the same content, except that the first parameter has been <code>curried</code> and embedded in the new closure. By using <code>curry</code> in this way, the caller of the curried closure doesn't need worry about the first parameter..they can just invoke it with the campaign object in this case (ie. <code>row &lt;&lt; map[it](campaign)</code>.</p>
]]></content>
  </entry>
  
</feed>
