<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: problems | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/problems/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2013-04-02T20:35:22-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails: groovy.lang.MissingMethodException: No signature of method: ....getPersistentValue()]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/04/02/grails-groovy-dot-lang-dot-missingmethodexception-no-signature-of-method-dot-dot-dot-getpersistentvalue/"/>
    <updated>2013-04-02T15:42:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/04/02/grails-groovy-dot-lang-dot-missingmethodexception-no-signature-of-method-dot-dot-dot-getpersistentvalue</id>
    <content type="html"><![CDATA[<p>So I'm writing a unit test that uses getPersistentValue in one of the controllers, and I ran into the problem where I got this error:</p>

<p><code>
groovy.lang.MissingMethodException: No signature of method: Domain.getPersistentValue()
</code></p>

<p>I assumed that when I have the <code>@Mock(domain)</code> annotation, I would get all the available methods to me in the test. However, upon inspecting the methods using <code>instance.metaClass.methods*.name</code>, I realized it was missing some of the methods. Therefore you will need to mock those in your tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: not serving assets on production.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/29/rails-not-serving-assets-on-production/"/>
    <updated>2013-03-29T10:57:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/29/rails-not-serving-assets-on-production</id>
    <content type="html"><![CDATA[<p>So I changed my environment to be production, and I had issues with serving static content. Since my app was a single page app, I needed this to work (didn't want to put nginx or apache in front of it).</p>

<p>The error I was getting was this:</p>

<p><code>
ActionController::RoutingError (No route matches [GET] "/"):
</code></p>

<p>I did this in another project and forgot that I need to set the following parameter in <code>production.rb</code>:</p>

<p><code>
  config.serve_static_assets = true
</code></p>

<p>All was good afterwards!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: IntentService.onHandleIntent() not called]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/25/android-intentservice-dot-onhandleintent-not-called/"/>
    <updated>2013-03-25T21:27:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/25/android-intentservice-dot-onhandleintent-not-called</id>
    <content type="html"><![CDATA[<p>So I'm starting my new companion app to www.codetipdaily.com and one of the first things I need to create is a service that I can use to call out to the server once a day. Naturally I gravitated towards the <code>IntentSevice</code>, which seems to be the simplest to use. I had also overridden in my service.onStartCommand() to return <code>START_STICKY</code>, which would restart the service should it be stopped. Once I did that though, the system stopped calling my <code>onHandleIntent()</code> method. What's going on?</p>

<p>It turned out that I had forgotten to call <code>super.onStartCommand()</code> before I returned the static int. So the following fixed it:</p>

<p>```</p>

<pre><code>@Override
public int onStartCommand(android.content.Intent intent, int flags, int startId) {
    super.onStartCommand(intent, flags, startId);
    return START_STICKY;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache: SSL error: (98)Address already in use: make_sock: could not bind to address 0.0.0.0:443]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/26/apache-ssl-error-98-address-already-in-use-make-sock-could-not-bind-to-address-0-dot-0-0-dot-0-443/"/>
    <updated>2013-02-26T17:49:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/26/apache-ssl-error-98-address-already-in-use-make-sock-could-not-bind-to-address-0-dot-0-0-dot-0-443</id>
    <content type="html"><![CDATA[<p>So I'm now configuring SSL with my new httpd server, and for some reason it kept giving me this error when I first started the server:</p>

<p><code>
(98)Address already in use: make_sock: could not bind to address 0.0.0.0:443
</code></p>

<p>But I did an <code>lsof -i :443</code> and I didn't see anything.</p>

<h3>The solution</h3>

<p>Turns out that I forgotten that Ubuntu's setup for httpd is a little non standard, in that they included a ports.conf file that includes a conditional which will start listening on port 443 if the ssl mod is enabled. I had also included a <code>listen 443</code> in my configuration, which led to the problem.</p>

<p>Removing the <code>listen 443</code> in my declaration solved the problem.</p>
]]></content>
  </entry>
  
</feed>
