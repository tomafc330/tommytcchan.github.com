<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: contentscript | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/contentscript/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-08-19T12:17:06-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chrome extension and AngularJS in contentscript]]></title>
    <link href="http://tommytcchan.github.com/blog/2014/08/19/chrome-extension-and-angularjs-in-contentscript/"/>
    <updated>2014-08-19T11:58:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2014/08/19/chrome-extension-and-angularjs-in-contentscript</id>
    <content type="html"><![CDATA[<p>I'm working on a Chrome extension for a client that involves Facebook, Youtube and syncing between players. Now I've written a few plugins such as <a href="http://www.emailfooterapp.com">EmailFooterApp</a>, <a href="https://chrome.google.com/webstore/detail/angellist500-startups-con/ialilknfihmdjmgfkmajhegfilfnilll">AngelList/500 Startups Connection Highlighter</a> and <a href="http://www.profiletrail.com">ProfileTrail</a> to name a few. However coming from an AngularJS world, I always had felt uncomfortable with writing so much jQuery code, so I've decided to try to incorporate AngularJS in my app. In this post I will talk about how I'm able to achieve that using a few tricks.</p>

<h1>The Setup:</h1>

<p>One best practice is first to load the html that will be displayed to the user in a separate file other than in your contentscript.js. One way to do that is to have jQuery load in the html:</p>

<p><code>jQuery('#es-content').load(chrome.extension.getURL('templates/loggedIn.html'));</code></p>

<p>In my <code>loggedIn.html</code>, I have the following:</p>

<p>```</p>

<div data-ng-controller="LoggedInController">
    <h3>Success! You are now logged in</h3>
    <h3>Welcome {{user.name}}!</h3>
    <br/>
    <p>There are {{currentWatching}} current users watching this video.</p>
    <button id="ecStart" class="yt-uix-button yt-uix-button-size-default yt-uix-button-subscribe-branded yt-uix-button-has-icon es-btn" type="button"><span
            class="subscribe-label"><img src="img/logo.png"/> Start Group Watch</span>
    </button>

</div>


<p><code>
Now the tricky part here is to NOT include the typical</code>data-ng-app``` but instead initialize Angular the manual way in contentscript.js (after you loaded the loggedIn.html):</p>

<p>```</p>

<pre><code>angular.module('ecstatic', [])
    .controller('LoggedInController', ['$scope', function ($scope) {
        $scope.user = {name: 'tom' // or use $http to fetch via ajax};
    }]);

// manually start angular from now on
angular.element(document).ready(function() {
    angular.bootstrap(document, ['ecstatic']);
});
</code></pre>

<p>```</p>

<p>Once the initialization happens then we are all good. When you load the page now it will insert 'tom' into the template. No more delcaratively scripting using jQuery!</p>
]]></content>
  </entry>
  
</feed>
