<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: httpd | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/httpd/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2013-04-13T17:21:50-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache2: hosting sever from a user directory requires x7x permission]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/28/apache2-hosting-sever-from-a-user-directory-requires-x7x-permission/"/>
    <updated>2013-02-28T20:07:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/28/apache2-hosting-sever-from-a-user-directory-requires-x7x-permission</id>
    <content type="html"><![CDATA[<p>I've been experimenting running a webapp in a a directory where I host my code, and in order for the server to read the dir, the base directory had to be x7x, such as
<code>
sudo chmod 774 repo
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache: SSL error: (98)Address already in use: make_sock: could not bind to address 0.0.0.0:443]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/26/apache-ssl-error-98-address-already-in-use-make-sock-could-not-bind-to-address-0-dot-0-0-dot-0-443/"/>
    <updated>2013-02-26T17:49:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/26/apache-ssl-error-98-address-already-in-use-make-sock-could-not-bind-to-address-0-dot-0-0-dot-0-443</id>
    <content type="html"><![CDATA[<p>So I'm now configuring SSL with my new httpd server, and for some reason it kept giving me this error when I first started the server:</p>

<p><code>
(98)Address already in use: make_sock: could not bind to address 0.0.0.0:443
</code></p>

<p>But I did an <code>lsof -i :443</code> and I didn't see anything.</p>

<h3>The solution</h3>

<p>Turns out that I forgotten that Ubuntu's setup for httpd is a little non standard, in that they included a ports.conf file that includes a conditional which will start listening on port 443 if the ssl mod is enabled. I had also included a <code>listen 443</code> in my configuration, which led to the problem.</p>

<p>Removing the <code>listen 443</code> in my declaration solved the problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache: Setting up rewrite rules for a server in Ubuntu 12.10]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/26/apache-setting-up-rewrite-rules-for-a-server-in-ubuntu-12-dot-10/"/>
    <updated>2013-02-26T15:26:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/26/apache-setting-up-rewrite-rules-for-a-server-in-ubuntu-12-dot-10</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>So I was configuring a Java app today, trying to get it deployed on httpd using ajp on Ubuntu. However, there was twist to it, and it is that the /static resources would have to point to a local file system folder (checked out with SCM).</p>

<p>I'm going to document how this is done on Ubuntu since it was somewhat of a painful process.</p>

<h3>Setup</h3>

<p>I had apache2 install via <code>apt-get</code>. The next step was to configure the apache2 server. The first thing needed was to specify the directory where the /static path resources will look in:</p>

<p>```
<Directory "~/web-assets"></p>

<pre><code>Options Indexes FollowSymLinks
AllowOverride None
Order allow,deny
Allow from all
</code></pre>

<p></Directory>
```</p>

<p>The next thing to do is to set up the ajp port.</p>

<p>```
<VirtualHost *:80></p>

<pre><code>...

ProxyPass           /           ajp://localhost:8010/
ProxyPassReverse    /           ajp://localhost:8010/

ProxyPreserveHost On

...
</code></pre>

<p></VirtualHost>
```</p>

<p>We then need to set up the rewrite rule:</p>

<p>```</p>

<pre><code>(...same VirtualHost declaration...)
RewriteRule     ^/static/\d+/(.*)                               %{DOCUMENT_ROOT}/world/$1       [L,E=STATIC_ASSET:1]
RewriteRule     ^/static/(.*)                                   %{DOCUMENT_ROOT}/world/$1       [L,E=STATIC_ASSET:1]
...
</code></pre>

<p>```</p>

<p>It's also good to have logging:</p>

<p>```</p>

<pre><code>(...same VirtualHost declaration...)
# logging
RewriteLog "/home/tchan/logs/rewrite.log"
RewriteLogLevel 3
...
</code></pre>

<p>```</p>

<p>Now enable the mods (using a2enmod):
<code>
a2enmod proxy
a2enmod rewrite
a2enmod ssl
</code></p>

<p>You might not need proxy or ssl but I did.</p>

<p>The next thing you need to do is to set up the permissions on your folder:</p>

<p><code>
cd ~/web-assets
chmod a=rwx -R *
</code></p>

<p>Note that if your location is somewhere else you might need to give the same permission to the parent of the folder that apache is looking it.
Also note that you can add the www-data user to the group that has the permission in your file system if you are hesitate to make that directory global.</p>

<p>Once you have it configured, all you need then is to configure you Java app to use the port 8010 defined above:</p>

<p>```</p>

<pre><code>&lt;Connector port="8010" protocol="AJP/1.3" redirectPort="8443"/&gt;
</code></pre>

<p>```</p>

<p>One last thing: I had to change the deploy context of the Java app from /app to / (root):
```</p>

<pre><code>  &lt;Context docBase="my-app" path="/" reloadable="true" source="org.eclipse.jst.j2ee.server:my-app"/&gt;&lt;/Host&gt;
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
