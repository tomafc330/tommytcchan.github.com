<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grails | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2013-03-28T21:59:09-07:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails and Intellij: discard old dependencies]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/22/grails-and-intellij-discard-old-dependencies/"/>
    <updated>2013-02-22T10:36:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/22/grails-and-intellij-discard-old-dependencies</id>
    <content type="html"><![CDATA[<p>So I'm working on a project that relies on a custom plugin, and it was listed as a dependency. However, I wanted it to reference a relative path instead. This was what was listed originally:</p>

<p>```
In BuildConfig.groovy
...</p>

<pre><code>plugins {
    test ":code-coverage:1.2.5"
    test ":spock:0.7"
    compile ":hibernate:2.0.0"
    compile ":quartz:1.0-RC2"
    compile ":rest:0.7"
    compile ":springcache:1.3.1"
        compile ":mycustomplugin:1.0"
}
</code></pre>

<p>}
```</p>

<p>In order to make it use your project relative project mycustomplugin (instead of fetching it from Archiva using maven), perform the following steps:</p>

<ol>
<li>Change your BuildConfig.groovy -- remove the above decl in the plugins block.</li>
<li>Update your BuildConfig.groovy to add the following:</li>
</ol>


<p><code>
grails.plugin.location.'mycustomplugin' = "../mycustomplugin"
</code>
3. Run <code>grails refresh-dependencies</code> in Intellij</p>

<p>Once it refreshes then you should be able to reference the plugin in your source tree rather than from remote.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy: unit testing method overridding using metaClass does not work]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/02/15/groovy-unit-testing-method-overridding-using-metaclass-does-not-work/"/>
    <updated>2013-02-15T16:04:00-08:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/02/15/groovy-unit-testing-method-overridding-using-metaclass-does-not-work</id>
    <content type="html"><![CDATA[<p>So I am devoting my whole afternoon writing unit tests for one of our projects at work and I was stuck on why overridding methods using the metaClass mechanism doesn't work. Consider this code:
```</p>

<pre><code>private void registerSuccessAction(RegistrationFormCommand cmd, userId) {
        def successUrl = '/register/success'
        ...
</code></pre>

<p>}
```
This was in my test</p>

<p>```
...</p>

<pre><code>controller.metaClass.registerSuccessAction = { command, userId -&gt;
    println "called"
                    }
</code></pre>

<p>...
```</p>

<p>However, I was runing into the fact that my overridding method isn't being called. What gives?</p>

<p>It turned out that you <em>need</em> to qualify the first command with the type if the method has a typed parameter, otherwise groovy won't override the behavior!</p>

<p>This works:</p>

<p>```</p>

<pre><code>controller.metaClass.registerSuccessAction = { RegistrationFormCommand command, userId -&gt;
            throw new AssertionError("This should not be called.")
                    }
</code></pre>

<p>````</p>
]]></content>
  </entry>
  
</feed>
