<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Grails | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/grails/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-01-05T18:03:42-08:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grails: Upgrading to 2.1.4 gives BeanDefinitionStoreException.]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/04/24/grails-upgrading-to-2-dot-1-4-gives-beandefinitionstoreexception/"/>
    <updated>2013-04-24T15:02:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/04/24/grails-upgrading-to-2-dot-1-4-gives-beandefinitionstoreexception</id>
    <content type="html"><![CDATA[<p>So I was upgrading my Grails installation to 2.1.4 (from 2.0.0) and one of the issues I came across was this error message when I tried to run the tests:</p>

<p><code>
Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name 'hibernateDatastore' defined in null: Could not resolve placeholder 'lang'
</code></p>

<p>Turns out that there is a problem with the evaluation of String in <code>Config.groovy</code></p>

<p>The solution is to cast the values to <code>GStrings</code></p>

<p>```</p>

<pre><code>    myConf = "google.ca/${lang}/" as GString
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails: at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/04/12/grails-at-org-dot-apache-dot-tools-dot-ant-dot-unknownelement-dot-execute-unknownelement-dot-java-291/"/>
    <updated>2013-04-12T15:10:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/04/12/grails-at-org-dot-apache-dot-tools-dot-ant-dot-unknownelement-dot-execute-unknownelement-dot-java-291</id>
    <content type="html"><![CDATA[<p>So I was having this issue with my Grails upgrade from 2.0.0 to 2.1.4:</p>

<p><code>
NullPointerException
at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
</code></p>

<p>I was like what's going on here? There isn't really any indications, so I had to use <code>git bisect</code> to see when I introduced the problem. Turns out (I don't have an explaination for this) that one of my tablib closures had an extra <code>-&gt;</code>:</p>

<p>```</p>

<pre><code>def initFacebokShareBtn = { -&gt; //note this
    ...
}
</code></pre>

<p>```</p>

<p>By having that extra notation it gave me errors. Once I removed it then it worked. Perhaps the Grails folks introduced something in 2.1.4?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grails: groovy.lang.MissingMethodException: No signature of method: ....getPersistentValue()]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/04/02/grails-groovy-dot-lang-dot-missingmethodexception-no-signature-of-method-dot-dot-dot-getpersistentvalue/"/>
    <updated>2013-04-02T15:42:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/04/02/grails-groovy-dot-lang-dot-missingmethodexception-no-signature-of-method-dot-dot-dot-getpersistentvalue</id>
    <content type="html"><![CDATA[<p>So I'm writing a unit test that uses getPersistentValue in one of the controllers, and I ran into the problem where I got this error:</p>

<p><code>
groovy.lang.MissingMethodException: No signature of method: Domain.getPersistentValue()
</code></p>

<p>I assumed that when I have the <code>@Mock(domain)</code> annotation, I would get all the available methods to me in the test. However, upon inspecting the methods using <code>instance.metaClass.methods*.name</code>, I realized it was missing some of the methods. Therefore you will need to mock those in your tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caution: Testing Grails filter while overriding the request/response object in the setup().]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/03/15/caution-testing-grails-filter-while-overriding-the-request-slash-response-object-in-the-setup/"/>
    <updated>2013-03-15T12:34:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/03/15/caution-testing-grails-filter-while-overriding-the-request-slash-response-object-in-the-setup</id>
    <content type="html"><![CDATA[<p>So I'm doing some testing on the filter recently, and I of the things I notice right away was that the previous committer had initializers all over the place:
```
void test_filters_all_with_no_utmParams_noSession_with__invalid_Cookie() {</p>

<pre><code>    FilterConfig filter = findConfig('all')

    def request = new MockHttpServletRequest()
    def response = new MockHttpServletResponse()
    setUpWebCookieService(request, response)

    request.session = createSession(null, null, 'true')
    request.cookies = [new Cookie('blah')]
</code></pre>

<p>...
```
So I thought, why not just put of the same declarations on the setup method()? Well, it turns out that Grails dynamic closures will clobber the request/response variables. When I ran the tests with the declarations in the setup, no matter what I do I was not able to set my variable.</p>

<p>After some digging around, I realized one thing:</p>

<ol>
<li>The test already injects the request/response objects in your filter tests, so overriding actually causes problems, leading to my variables not being set on the correct request/response instance.</li>
</ol>


<p>I'll let you decide what's best for yourself.</p>
]]></content>
  </entry>
  
</feed>
