<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thin | Tommy Chan's software blog (@tommytcchan)]]></title>
  <link href="http://tommytcchan.github.com/blog/categories/thin/atom.xml" rel="self"/>
  <link href="http://tommytcchan.github.com/"/>
  <updated>2014-01-05T18:03:42-08:00</updated>
  <id>http://tommytcchan.github.com/</id>
  <author>
    <name><![CDATA[Tommy Chan (informotion software)]]></name>
    <email><![CDATA[tommytcchan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Passenger Nginx and Rails and Thin - set up reverse proxy on a Thin server instance]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/12/passenger-nginx-and-rails-and-thin-set-up-reverse-proxy-on-a-thin-server-instance/"/>
    <updated>2013-08-12T13:22:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/12/passenger-nginx-and-rails-and-thin-set-up-reverse-proxy-on-a-thin-server-instance</id>
    <content type="html"><![CDATA[<p>My previous post talked about setting passenger and rails. In this post I will talk about something different - using Nginx as a reverse proxy while having one (or many) Thin server instances.</p>

<p>Basically the setup is the same as the previous post, except that you want to set up the server block a little differently:</p>

<p>```</p>

<pre><code>upstream domain1 {
    server 127.0.0.1:3000;
    #server 127.0.0.1:3001;
}

server {
    listen 80;
    server_name localhost;
    root /home/tchan/repo/venuespot/public;   # &lt;--- be sure to point to 'public'!


    location / {
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (-f $request_filename/index.html) {
            rewrite (.*) $1/index.html break;
        }

        if (-f $request_filename.html) {
            rewrite (.*) $1.html break;
        }

        if (!-f $request_filename) {
            proxy_pass http://domain1;
        break;
        }
    }
}
</code></pre>

<p>```</p>

<p>Why might this be a better setup than using Passenger? Well Thin uses an evented model, so for long running blocking I/O operations, it might be good to set this up if you want more fine grain control. Just be sure to check that the Thin instances are still running periodically (or make sure you catch all exceptions in your app).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passenger]]></title>
    <link href="http://tommytcchan.github.com/blog/2013/08/12/passenger/"/>
    <updated>2013-08-12T12:52:00-07:00</updated>
    <id>http://tommytcchan.github.com/blog/2013/08/12/passenger</id>
    <content type="html"><![CDATA[<p>I'm setting up our beta site for <a href="http://venuespot.co">venuespot</a>, and one of the golden rules is that everything should be as close to the production site as possible.</p>

<p>Here are the instructions for how to use passenger with nginx and rails (3.2.11) on Ubuntu 12.10. I did read the docs but I found that it was missing a few things, so hopefully this tutorial will address your problems. See the section on Troubleshooting for more solutions to the problems I encountered.</p>

<h1>Introduction</h1>

<p>First, you will want to install passenger:
<code>
gem install passenger
</code>
(Optional). Then, you would want to get the latest rvm:
<code>
rvm get latest
rvm reload
</code></p>

<p>Now install nginx with the passenger mod:
<code>
rvmsudo passenger-install-nginx-module
(If the above fails, then you will need to update your rvm.)
</code>
Now get the libcurl (or whatever it tells you) library.
<code>
apt-get install libcurl4-openssl-dev
</code></p>

<p>Okay, we're at the halfway point. Next we should edit the nginx config file at <code>/opt/nginx/conf/nginx.conf</code>. Remove the original <code>server</code> block and add the following</p>

<p>```
server {</p>

<pre><code>listen 80;
server_name localhost;
root /yourwebapp/public; # &lt;--- be sure to point to 'public'!
passenger_enabled on;
</code></pre>

<p>}</p>

<p>passenger_pre_start http://localhost/;</p>

<p>```</p>

<p>Next, we need to make sure the nginx process can have 777 access to config.ru and make sure all the way up the path we have 777 as well.</p>

<p><code>
chmod 777 /yourwebapp
chmod 777 config.ru
</code></p>

<p>Now create the nginx init script:</p>

<p><code>
wget -O init-deb.sh http://library.linode.com/assets/1139-init-deb.sh
mv init-deb.sh /etc/init.d/nginx
chmod +x /etc/init.d/nginx
/usr/sbin/update-rc.d -f nginx defaults
</code></p>

<p>Now start the server:
<code>
/etc/init.d/nginx start
</code></p>

<p>There you have it folks! Navigate to localhost and you should see your site!</p>

<h1>Troubleshooting</h1>

<p>In the event that you don't see anything, you should check your logs in <code>/opt/nginx/logs</code> to ensure everything was done correctly.</p>

<p>For example, you might see this: <code>Error page:
Could not find amq-client-1.0.2 in any of the sources (Bundler::GemNotFound)</code></p>

<p>This means your gems have not been installed. Do a bundle install in your rails dir</p>

<p>Or, you might see somethign like this: <code>terminate called after throwing an instance of 'Passenger::FileSystemException'
  what():  Cannot stat '/yourwebapp/config.ru': Permission denied (errno=13)
</code></p>

<p>This means you need to set your permissions correctly for the whole path (see above).</p>
]]></content>
  </entry>
  
</feed>
